"""
Django settings for jewelry_pos project.
Generated by 'django-admin startproject' using Django 5.2.6.
"""

import os
from pathlib import Path
import dj_database_url
from dotenv import load_dotenv

# --- LOAD LOCAL ENVIRONMENT VARIABLES ---
# This line finds and loads the variables from your .env file (like DEBUG=True)
# It MUST be near the top of the file.
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-cq027(*_*hihc0&-sm$6qtw5@29=rkys!q938mi=^44snzv@92')

# Reads SECRET_KEY from .env locally, or from Render's environment variables
SECRET_KEY = os.environ.get('SECRET_KEY')


# This reads the DEBUG setting from an environment variable.
# It will be True on your local machine (if you create a .env file) and False on Render.
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# This defines which domain names are allowed to serve your site.
ALLOWED_HOSTS = [
    'kavs-glamstone.onrender.com',
    'kavsglamstone.netlify.app',
    'localhost',
    'http://localhost:5173',
    '127.0.0.1',
]

RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

# This is the list of all Django apps that are active in your project.
# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin', # We will add this conditionally below
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'cloudinary_storage',
    'django.contrib.staticfiles',
    'cloudinary',
    'corsheaders',
    'rest_framework',
    'inventory',
]

# This is the key fix for the build error: The admin panel is only
# included during local development, not in production.
if DEBUG:
    INSTALLED_APPS.insert(0, 'django.contrib.admin')


# Middleware processes requests and responses globally. The order is important.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# This points to your project's main URL configuration.
ROOT_URLCONF = 'jewelry_pos.urls'

# This defines how Django finds and renders HTML templates.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# This is the entry point for web servers to run your application.
WSGI_APPLICATION = 'jewelry_pos.wsgi.application'


# This configures your database to use PostgreSQL on Render and SQLite locally.
DATABASES = {
    'default': dj_database_url.config(
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",
        conn_max_age=600
    )
}

# # Database
# DATABASES = {
#     'default': dj_database_url.config(
#         default='sqlite:///db.sqlite3',
#         conn_max_age=600
#     )
# }

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# Standard Django password validators.
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
# STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# The modern Django setting for defining storage backends.

if DEBUG:
    # During local development, save media files to the local 'media' folder.
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    STORAGES = {
        "default": { "BACKEND": "django.core.files.storage.FileSystemStorage" },
        "staticfiles": { "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage" },
    }
else:
    # In production, use Cloudinary for media and WhiteNoise for static files.
    STORAGES = {
        "default": { "BACKEND": "cloudinary_storage.storage.MediaCloudinaryStorage" },
        "staticfiles": { "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage" },
    }



# STORAGES = {
#     "default": { "BACKEND": "cloudinary_storage.storage.MediaCloudinaryStorage" },
#     "staticfiles": { "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage" }
# }

WHITENOISE_IGNORE_MISSING_FILES = True

# Legacy settings for compatibility with cloudinary_storage
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'


# --- Cloudinary Configuration ---
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.environ.get('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': os.environ.get('CLOUDINARY_API_KEY'),
    'API_SECRET': os.environ.get('CLOUDINARY_API_SECRET')
}



# CORS Headers Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "https://localhost:5127",
    "https://kavsglamstone.netlify.app",
]

# CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_REDIRECTS = True


   

# Media files
MEDIA_URL = '/media/'

# REST Framework
# REST_FRAMEWORK = {
#     'DEFAULT_RENDERER_CLASSES': (
#         'rest_framework.renderers.JSONRenderer',
#         'rest_framework.renderers.BrowsableAPIRenderer',
#         'rest_framework_csv.renderers.CSVRenderer',
#     ),
# }

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': ('rest_framework.renderers.JSONRenderer',) if not DEBUG else (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    )
}

# Security settings for production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True


# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'